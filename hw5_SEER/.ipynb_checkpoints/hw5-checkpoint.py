# -*- coding: utf-8 -*-"""Spyder EditorThis is a temporary script file."""import numpy as npimport pandas as pdfrom sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_split# load cancer incidence and income by county data files (remove first row for US)incidence = pd.read_csv("incidence.tsv", sep='\t').iloc[1:,:]income = pd.read_csv("income.csv").iloc[1:,:].dropna()# merge two filesdf = incidence.set_index('FIPS').join(income.set_index('FIPS'), how='inner').reset_index()# convert cancer incidence and income variables to numeric, and drop rows with missing valuesdf['Value (Dollars)'] = df['Value (Dollars)'].astype('int')df['Age-Adjusted Incidence Rate - cases per 100,000'] = pd.to_numeric(df['Age-Adjusted Incidence Rate - cases per 100,000'], errors='coerce')df.dropna(inplace=True)df.plot(x='Value (Dollars)', y='Age-Adjusted Incidence Rate - cases per 100,000', kind='scatter')def model_lr(X, y):    # split into train/test sets    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=6)        # Create and train the model using our training data    model = LinearRegression().fit(X_train, y_train)        # view the training model's coefficient    print("model coefficient: {coef}".format(coef=model.coef_))        # view the R-Squared score    print("R^2: {r2}".format(r2=model.score(X_test, y_test)))        # calcualte the residual sum of squares (RSS) and mean squared errror (MSE) on test data    rss = ((y_test - model.predict(X_test)) **2).sum()    print("RSS: {RSS}".format(RSS=rss))    mse = np.mean((model.predict(X_test) - y_test) **2)    print("MSE: {MSE}".format(MSE=mse))# LR model without variable transformationmodel_lr(df['Value (Dollars)'].values.reshape(-1,1), df['Age-Adjusted Incidence Rate - cases per 100,000'].values)# apply log transformation to feature, and refit modelprint("Log transformation on X")model_lr(np.log(df['Value (Dollars)'].values.reshape(-1,1)), df['Age-Adjusted Incidence Rate - cases per 100,000'].values)# apply log transformation to target variable, and refit modelprint("Log transformation on y")model_lr(df['Value (Dollars)'].values.reshape(-1,1), np.log(df['Age-Adjusted Incidence Rate - cases per 100,000'].values))